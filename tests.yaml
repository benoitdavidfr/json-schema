title: tests utilisant les exemples donnés dans la doc json-schema + draft-07 lui-même
jSchema: { $ref: http://localhost/schema/tests.schema.yaml }
source: https://json-schema.org/understanding-json-schema/reference/index.html
schemas:
  - title: Hello, World! - empty object
    schema: { }
    tests:
      - data: 42
        result: true
      - data: "I'm a string"
        result: true
      - data: { "an": [ "arbitrarily", "nested" ], "data": "structure" }
        result: true
  - title: Hello, World! - maches anything
    schema: true
    tests:
      - data: 42
        result: true
      - data: "I'm a string"
        result: true
      - data: { "an": [ "arbitrarily", "nested" ], "data": "structure" }
        result: true
  - title: Hello, World! - maches nothing
    schema: false
    tests:
      - data: "Resistance is futile...  This will always fail!!!"
        result: false
  - title: type keyword 
    schema: {type: number}
    tests:
      - data: 42
        result: true
      - data: 42.3
        result: true
      - data: '42.3'
        result: false
  - title: types number | string
    schema: { type: [number, string] }
    tests:
      - data: 42
        result: true
      - data: "Life, the universe, and everything"
        result: true
      - data: ["Life", "the universe", "and everything"]
        result: false
  - title: type string
    schema: { type: string }
    tests:
      - data: "This is a string"
        result: true
      - data: "Déjà vu"
        result: true
      - data: '42'
        result: true
      - data: 42
        result: false
  - title: string length
    schema:
      type: string
      minLength: 2
      maxLength: 3
    tests:
      - data: A
        result: false
      - data: AB
        result: true
      - data: ABC
        result: true
      - data: ABCD
        result: false
  - title: string pattern
    schema:
      type: string
      pattern: '^(\([0-9]{3}\))?[0-9]{3}-[0-9]{4}$'
    tests:
      - data: "555-1212"
        result: true
      - data: "(888)555-1212"
        result: true
      - data: "(888)555-1212 ext. 532"
        result: false
      - data: "(800)FLOWERS"
        result: false
  - title: Numeric types - type integer
    schema: { type: integer }
    tests:
      - data: 42
        result: true
      - data: -1
        result: true
      - data: 3.1415926
        result: false
      - data: '42'
        result: false
  - title: Numeric types - type number multipleOf
    schema: { "type": "number", "multipleOf": 1.0 }
    tests:
      - data: 42
        result: true
      - data: 42.0
        result: true
      - data: 3.1415926
        result: false
  - title: Numeric types - type number
    schema: { type: number, minimum: 0, exclusiveMaximum: 100 }
    tests:
      - data: -1
        result: false
      - data: 0
        result: true
      - data: 10
        result: true
      - data: 99
        result: true
      - data: 100
        result: false
      - data: 101
        result: false
  - title: Numeric types - multipleOf 10
    schema:
      type: number
      multipleOf: 10
    tests:
      - data: 0
        result: true
      - data: 10
        result: true
      - data: 20
        result: true
      - data: 23
        result: false
  - title: Numeric types - multipleOf 1.1
    schema:
      type: number
      multipleOf: 1.1
    tests:
      - data: 0
        result: true
      - data: 5.5
        result: true
      - data: 11
        result: true
      - data: 23
        result: false
  - title: type object
    schema: { type: object }
    tests:
      - data:
          key: value
          another_key: another_value
        result: true
      - data: "Not an object"
        result: false
      - data: ["An", "array", "not", "an", "object"]
        result: false
  - title: Properties 
    schema:
      type: object
      properties:
          number: { type: number }
          street_name: { type: string }
          street_type: { type: string, enum: [Street, Avenue, Boulevard] }
    tests:
      - data: { number: 1600, street_name: Pennsylvania, street_type: Avenue }
        result: true
      - data: { "number": "1600", "street_name": "Pennsylvania", "street_type": "Avenue" }
        result: false
      - data: { "number": 1600, "street_name": "Pennsylvania" }
        result: true
      - data: { }
        result: true
      - data: { "number": 1600, "street_name": "Pennsylvania", "street_type": "Avenue", "direction": "NW" }
        result: true
      - data: { }
        result: true
  - title: additional Properties as boolean
    schema:
      type: object
      properties:
          number: {type: number}
          street_name: {type: string}
          street_type: { type: string, enum: [Street, Avenue, Boulevard] }
      additionalProperties: false
    tests:
      - data: { "number": 1600, "street_name": "Pennsylvania", "street_type": "Avenue" }
        result: true
      - data: { "number": 1600, "street_name": "Pennsylvania", "street_type": "Avenue", "direction": "NW" }
        result: false
      - data: { }
        result: true
  - title: additional Properties as schema
    schema:
      type: object
      properties:
          number: { type: number }
          street_name: { type: string }
          street_type: { type: string, enum: [Street, Avenue, Boulevard] }
      additionalProperties: { type: string }
    tests:
      - data: { "number": 1600, "street_name": "Pennsylvania", "street_type": "Avenue" }
        result: true
      - data: { "number": 1600, "street_name": "Pennsylvania", "street_type": "Avenue", "direction": "NW" }
        result: true
      - data: { "number": 1600, "street_name": "Pennsylvania", "street_type": "Avenue", "office_number": 201  }
        result: false
  - title: Required Properties 
    schema:
      type: object
      properties:
          name: {type: string}
          email: {type: string}
          address: {type: string}
          telephone: {type: string}
      required: [name, email]
    tests:
      - data: { "name": "William Shakespeare", "email": "bill@stratford-upon-avon.co.uk" }
        result: true
      - data:
          name: 'William Shakespeare'
          email: bill@stratford-upon-avon.co.uk
          address: 'Henley Street, Stratford-upon-Avon, Warwickshire, England'
          authorship: 'in question'
        result: true
      - data: { "name": "William Shakespeare", "address": "Henley Street, Stratford-upon-Avon, England" }
        result: false
  - title: Property names
    schema:
      type: object
      propertyNames:
          pattern: '^[A-Za-z_][A-Za-z0-9_]*$'
    tests:
      - data: { "_a_proper_token_001": "value" }
        result: true
      - data: { "001 invalid": "value" }
        result: false
  - title: minProperties + maxProperties
    schema:
      type: object
      minProperties: 2
      maxProperties: 3
    tests:
      - data: {}
        result: false
      - data: { "a": 0 }
        result: false
      - data: { "a": 0, "b": 1 }
        result: true
      - data: { "a": 0, "b": 1, "c": 2 }
        result: true
      - data: { "a": 0, "b": 1, "c": 2, "d": 3 }
        result: false
  - title: Property dependencies
    schema:
      type: object
      properties:
          name: { type: string }
          credit_card: { type: number }
          billing_address: { type: string }
      required: [ name ]
      dependencies:
          credit_card:
              - billing_address
    tests:
      - data:
          name: John Doe
          credit_card: 5555555555555555
          billing_address: 555 Debtor's Lane
        result: true
      - data:
          name: John Doe
          credit_card: 5555555555555555
        result: false
      - data:
          name: John Doe
        result: true
      - data:
          name: John Doe
          billing_address: 555 Debtor's Lane
        result: true
  - title: Property dependencies bidirectional
    schema:
      type: object
      properties:
          name: { type: string }
          credit_card: { type: number }
          billing_address: { type: string }
      required: [ name ]
      dependencies:
          credit_card: [ billing_address ]
          billing_address: [ credit_card ]
    tests:
      - data:
          name: John Doe
          credit_card: 5555555555555555
        result: false
      - data:
          name: John Doe
          billing_address: 555 Debtor's Lane
        result: false
  - title: Schema dependencies
    schema:
      type: object
      properties:
        name: { type: string }
        credit_card: { type: number }
      required: [ name ]
      dependencies:
        credit_card:
          properties:
            billing_address: { type: string }
          required: [ billing_address ]
    tests:
      - data:
          name: John Doe
          credit_card: 5555555555555555
          billing_address: 555 Debtor's Lane
        result: true
      - data:
          name: John Doe
          credit_card: 5555555555555555
        result: false
      - data:
          name: John Doe
          billing_address: 555 Debtor's Lane
        result: true
      - data:
          name: John Doe
          credit_card: 5555555555555555
          billing_address: { "number": 1600, "street_name": "Pennsylvania", "street_type": "Avenue" }
        result: false
  - title: Pattern Properties 
    schema:
      type: object
      patternProperties:
          ^S_:
              type: string
          ^I_:
              type: integer
      additionalProperties: false
    tests:
      - data: { "S_25": "This is a string" }
        result: true
      - data: { "I_0": 42 }
        result: true
      - data: { "S_0": 42 }
        result: false
      - data: { "I_42": "This is a string" }
        result: false
      - data: { "keyword": "value" }
        result: false
  - title: Pattern Properties + additional Properties
    schema:
      type: object
      patternProperties:
          ^S_: {type: string}
          ^I_: {type: integer}
      additionalProperties: false
    tests:
      - data: { "S_25": "This is a string" }
        result: true
      - data: { "I_0": 42 }
        result: true
      - data: { "S_0": 42 }
        result: false
      - data: { "I_42": "This is a string" }
        result: false
      - data: { "keyword": "value" }
        result: false
  - title: array 
    schema: { type: array }
    tests:
      - data: [1, 2, 3, 4, 5]
        result: true
      - data: [3, "different", { "types" : "of values" }]
        result: true
      - data: {"Not": "an array"}
        result: false
  - title: Items 
    schema:
      type: array
      items:
          type: number
    tests:
      - data: [1, 2, 3, 4, 5]
        result: true
      - data: [1, 2, "3", 4, 5]
        result: false
      - data: []
        result: true
  - title: List validation avec contains
    schema:
      type: array
      contains:
          type: number
    tests:
      - data: ["life", "universe", "everything", 42]
        result: true
      - data: ["life", "universe", "everything", "forty-two"]
        result: false
      - data: [1, 2, 3, 4, 5]
        result: true
  - title: Tuple validation
    schema:
      type: array
      items:
        - type: number
        - type: string
        - type: string
          enum: [ Street, Avenue, Boulevard ]
        - type: string
          enum: [ NW, NE, SW, SE ]
    tests:
      - data: [1600, "Pennsylvania", "Avenue", "NW"]
        result: true
      - data: [24, "Sussex", "Drive"]
        result: false
      - data: ["Palais de l'Élysée"]
        result: false
      - data: [10, "Downing", "Street"]
        result: true
      - data: [1600, "Pennsylvania", "Avenue", "NW", "Washington"]
        result: true
  - title: Tuple validation + additionalItems as boolean
    schema:
      items:
        - type: number
        - type: string
        - type: string
          enum: [ Street, Avenue, Boulevard ]
        - type: string
          enum: [ NW, NE, SW, SE ]
      additionalItems: false
    tests:
      - data: [1600, "Pennsylvania", "Avenue", "NW"]
        result: true
      - data: [1600, "Pennsylvania", "Avenue"]
        result: true
      - data: [1600, "Pennsylvania", "Avenue", "NW", "Washington"]
        result: false
  - title: Tuple validation + additionalItems as schema
    schema:
      items:
        - type: number
        - type: string
        - type: string
          enum: [ Street, Avenue, Boulevard ]
        - type: string
          enum: [ NW, NE, SW, SE ]
      additionalItems: { type: string }
    tests:
      - data: [1600, "Pennsylvania", "Avenue", "NW", "Washington"]
        result: true
      - data: [1600, "Pennsylvania", "Avenue", "NW", 20500]
        result: false
  - title: minItems + maxItems
    schema:
      type: array
      minItems: 2
      maxItems: 3
    tests:
      - data: []
        result: false
      - data: [1]
        result: false
      - data: [1, 2]
        result: true
      - data: [1, 2, 3]
        result: true
      - data: [1, 2, 3, 4]
        result: false
  - title: Uniqueness
    schema:
      type: array
      uniqueItems: true
    tests:
      - data: [1, 2, 3, 4, 5]
        result: true
      - data: [1, 2, 3, 3, 4]
        result: false
      - data: []
        result: true
  - title: boolean type
    schema: { type: boolean }
    tests:
      - data: true
        result: true
      - data: false
        result: true
      - data: 'true'
        result: false
      - data: 0
        result: false
  - title: null type
    schema: { type: 'null' }
    tests:
      - data: null
        result: true
      - data: false
        result: false
      - data: 0
        result: false
      - data: ''
        result: false
  - title: Generic keywords - examples
    schema:
      title: 'Match anything'
      description: 'This is a schema that matches anything.'
      default: 'Default value'
      examples:
          - Anything
          - 4035
    tests:
      - data: Anything
        result: true
  - title: Generic keywords - Enumerated string values
    schema:
      type: string
      enum: ["red", "amber", "green"]
    tests:
      - data: red
        result: true
      - data: blue
        result: false
  - title: Generic keywords - Enumerated misc values
    schema:
      enum: ["red", "amber", "green", null, 42]
    tests:
      - data: red
        result: true
      - data: null
        result: true
      - data: 42
        result: true
      - data: blue
        result: false
  - title: Generic keywords - Constant values
    schema:
      properties:
          country:
              const: 'United States of America'
    tests:
      - data: { "country": "United States of America" }
        result: true
      - data: { "country": "Canada" }
        result: false
  - title: Combining schemas oneOf
    schema:
      oneOf:
        - type: string
          maxLength: 5
        - type: number
          minimum: 0
    tests:
      - data: short
        result: true
      - data: too long
        result: false
      - data: 12
        result: true
      - data: -5
        result: false
  - title: Combining schemas allOf ok
    schema:
      allOf:
        - type: string
        - maxLength: 5
    tests:
      - data: short
        result: true
      - data: too long
        result: false
  - title: Combining schemas allOf impossible
    schema:
      allOf:
        - type: string
        - type: number
    tests:
      - data: No way
        result: false
      - data: -1
        result: false
  - title: Combining schemas anyOf
    schema:
      anyOf:
        - type: string
          maxLength: 5
        - type: number
          minimum: 0
    tests:
      - data: short
        result: true
      - data: too long
        result: false
      - data: 12
        result: true
      - data: -5
        result: false
  - title: Combining schemas oneOf
    schema:
      oneOf:
        - type: number
          multipleOf: 5
        - type: number
          multipleOf: 3
      
    tests:
      - data: 10
        result: true
      - data: 9
        result: true
      - data: 2
        result: false
      - data: 15
        result: false
  - title: Combining schemas not
    schema: { not: { type: string } }
    tests:
      - data: 42
        result: true
      - data: { "key": "value" }
        result: true
      - data: I am a string
        result: false

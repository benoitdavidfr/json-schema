title: tests utilisant les exemples donnés dans la doc json-schema
jSchema:
  type: object
  properties:
    schemas:
      type: array
      items:
        type: object
        required: [title]
        properties:
          title: { type: string }
          schema:
            $ref: http://localhost/schema/json-schema.schema.json
          tests: { type: array }
source: https://json-schema.org/understanding-json-schema/reference/index.html
schemas:
  - title: type keyword 
    schema: {type: number}
    tests:
      - data: 42
        result: true
      - data: 42.3
        result: true
      - data: '42.3'
        result: false
  - title: type list
    schema: { type: [number, string] }
    tests:
      - data: 42
        result: true
      - data: "Life, the universe, and everything"
        result: true
      - data: ["Life", "the universe", "and everything"]
        result: false
  - title: type string
    schema: { type: string }
    tests:
      - data: "This is a string"
        result: true
      - data: "Déjà vu"
        result: true
      - data: '42'
        result: true
      - data: 42
        result: false
  - title: type integer
    schema: { type: integer }
    tests:
      - data: 42
        result: true
      - data: -1
        result: true
      - data: 3.1415926
        result: false
      - data: '42'
        result: false
  - title: type number
    schema: { type: number, minimum: 0, exclusiveMaximum: 100 }
    tests:
      - data: -1
        result: false
      - data: 0
        result: true
      - data: 10
        result: true
      - data: 99
        result: true
      - data: 100
        result: false
      - data: 101
        result: false
  - title: type object
    schema: { type: object }
    tests:
      - data:
          key: value
          another_key: another_value
        result: true
      - data: "Not an object"
        result: false
      - data: ["An", "array", "not", "an", "object"]
        result: false
  - title: Properties 
    schema:
      type: object
      properties:
          number: {type: number}
          street_name: {type: string}
          street_type: { type: string, enum: [Street, Avenue, Boulevard] }
    tests:
      - data: { "number": 1600, "street_name": "Pennsylvania", "street_type": "Avenue" }
        result: true
      - data: { "number": "1600", "street_name": "Pennsylvania", "street_type": "Avenue" }
        result: false
      - data: { "number": 1600, "street_name": "Pennsylvania" }
        result: true
      - data: { }
        result: true
      - data: { "number": 1600, "street_name": "Pennsylvania", "street_type": "Avenue", "direction": "NW" }
        result: true
      - data: { }
        result: true
  - title: additional Properties 
    schema:
      type: object
      properties:
          number: {type: number}
          street_name: {type: string}
          street_type: { type: string, enum: [Street, Avenue, Boulevard] }
      additionalProperties: false
    tests:
      - data: { "number": 1600, "street_name": "Pennsylvania", "street_type": "Avenue" }
        result: true
      - data: { "number": 1600, "street_name": "Pennsylvania", "street_type": "Avenue", "direction": "NW" }
        result: false
        comment: additionalProperties not implemented
      - data: { }
        result: true
  - title: Required Properties 
    schema:
      type: object
      properties:
          name: {type: string}
          email: {type: string}
          address: {type: string}
          telephone: {type: string}
      required: [name, email]
    tests:
      - data: { "name": "William Shakespeare", "email": "bill@stratford-upon-avon.co.uk" }
        result: true
      - data:
          name: 'William Shakespeare'
          email: bill@stratford-upon-avon.co.uk
          address: 'Henley Street, Stratford-upon-Avon, Warwickshire, England'
          authorship: 'in question'
        result: true
      - data: { "name": "William Shakespeare", "address": "Henley Street, Stratford-upon-Avon, England" }
        result: false
  - title: Property names
  - title: Size
  - title: Dependencies
  - title: Pattern Properties 
    schema:
      type: object
      patternProperties:
          ^S_:
              type: string
          ^I_:
              type: integer
      additionalProperties: false
    tests:
      - data: { "S_25": "This is a string" }
        result: true
      - data: { "I_0": 42 }
        result: true
      - data: { "S_0": 42 }
        result: false
      - data: { "I_42": "This is a string" }
        result: false
      - data: { "keyword": "value" }
        result: false
        comment: additionalProperties not implemented
  - title: Pattern Properties + additional Properties
  - title: array 
    schema: { type: array }
    tests:
      - data: [1, 2, 3, 4, 5]
        result: true
      - data: [3, "different", { "types" : "of values" }]
        result: true
      - data: {"Not": "an array"}
        result: false
  - title: Items 
    schema:
      type: array
      items:
          type: number
    tests:
      - data: [1, 2, 3, 4, 5]
        result: true
      - data: [1, 2, "3", 4, 5]
        result: false
      - data: []
        result: true
  - title: Tuple validation (non implémenté)
    schema:
      type: array
      items:
          - type: number
          - type: string
          - type: string
            enum: [ Street, Avenue, Boulevard ]
          - type: string
            enum: [ NW, NE, SW, SE ]
    schemaErrorComment: cas non implémenté
    tests:
      - data: [1600, "Pennsylvania", "Avenue", "NW"]
        result: true
      - data: [24, "Sussex", "Drive"]
        result: false
      - data: ["Palais de l'Élysée"]
        result: false
      - data: [10, "Downing", "Street"]
        result: true
      - data: [1600, "Pennsylvania", "Avenue", "NW", "Washington"]
        result: true
  - title: Tuple validation + additionalItems
  - title: Length
  - title: Uniqueness
  - title: boolean type
    schema: { type: boolean }
    tests:
      - data: true
        result: true
      - data: false
        result: true
      - data: 'true'
        result: false
      - data: 0
        result: false
  - title: null type
    schema: { type: 'null' }
    tests:
      - data: null
        result: true
      - data: false
        result: false
      - data: 0
        result: false
      - data: ''
        result: false
  - title: Generic keywords - examples
    schema:
      title: 'Match anything'
      description: 'This is a schema that matches anything.'
      default: 'Default value'
      examples:
          - Anything
          - 4035
    tests:
      - data: Anything
        result: true
  - title: Generic keywords - Enumerated string values
    schema:
      type: string
      enum: ["red", "amber", "green"]
    tests:
      - data: red
        result: true
      - data: blue
        result: false
  - title: Generic keywords - Enumerated misc values
    schema:
      enum: ["red", "amber", "green", null, 42]
    tests:
      - data: red
        result: true
      - data: null
        result: true
      - data: 42
        result: true
      - data: blue
        result: false
  - title: Generic keywords - Constant values
    schema:
      properties:
          country:
              const: 'United States of America'
    tests:
      - data: United States of America
        result: true
      - data: France
        result: false
  - title: Combining schemas
    schema:
      anyOf:
          -   type: string
              maxLength: 5
          -   type: number
              minimum: 0
    tests:
      - data: short
        result: true
      - data: too long
        result: false
      - data: 12
        result: true
      - data: -5
        result: false


